// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  VERIFIED
  REJECTED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  NFT_MINTED
}

enum TOKEN_TYPE {
  REFRESH
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  walletAddress String         @unique @db.VarChar(100)
  username      String?        @db.VarChar(50)
  email         String?        @unique @db.VarChar(255)
  token         UserToken[]
  verifications Verification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Client {
  id            String         @id @default(uuid()) @db.Uuid
  walletAddress String         @unique @db.VarChar(100)
  username      String?        @db.VarChar(50)
  email         String?        @unique @db.VarChar(255)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Verification  Verification[]
  ClientToken   ClientToken[]
}

model UserToken {
  id String @id @default(uuid())

  type  TOKEN_TYPE
  token String

  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  expires_at DateTime
  created_at DateTime @default(now())
}

model ClientToken {
  id String @id @default(uuid())

  type  TOKEN_TYPE
  token String

  client_id String @db.Uuid
  Client    Client @relation(fields: [client_id], references: [id])

  expires_at DateTime
  created_at DateTime @default(now())
}

model Verification {
  id                  String             @id @default(uuid()) @db.Uuid
  Client              Client?            @relation(fields: [clientId], references: [id])
  clientId            String?            @db.Uuid
  User                User?              @relation(fields: [userId], references: [id])
  userId              String?            @db.Uuid
  name                String
  status              VerificationStatus
  description         String
  clientWalletAddress String
  completedAt         DateTime
  submittedAt         DateTime
  skills              Skill[]
  files               String[]
  Comment             Comment[]
}

model Comment {
  id             String       @id @default(uuid()) @db.Uuid
  content        String       @db.Text
  authorWallet   String       @db.VarChar(42)
  verification   Verification @relation(fields: [verificationId], references: [id])
  verificationId String       @db.Uuid
  createdAt      DateTime     @default(now())
}

model Skill {
  id             String        @id @default(uuid()) @db.Uuid
  name           String        @db.VarChar(50)
  createdAt      DateTime      @default(now())
  Verification   Verification? @relation(fields: [verificationId], references: [id])
  verificationId String?       @db.Uuid
}
