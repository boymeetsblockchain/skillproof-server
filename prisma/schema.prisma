// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  VERIFIED
  REJECTED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  NFT_MINTED
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  walletAddress String         @unique @db.VarChar(42)
  username      String?        @db.VarChar(50)
  email         String?        @unique @db.VarChar(255)
  projects      Project[]
  verifications Verification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Project {
  id           String        @id @default(uuid()) @db.Uuid
  title        String        @db.VarChar(100)
  description  String        @db.Text
  status       ProjectStatus @default(IN_PROGRESS)
  completedAt  DateTime
  submittedAt  DateTime      @default(now())
  freelancer   User          @relation(fields: [userId], references: [id])
  userId       String        @db.Uuid
  files        String[]
  skills       Skill[]
  verification Verification?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Verification {
  id             String             @id @default(uuid()) @db.Uuid
  project        Project            @relation(fields: [projectId], references: [id])
  projectId      String             @unique @db.Uuid
  status         VerificationStatus @default(PENDING)
  comments       Comment[]
  approverWallet String?            @db.VarChar(42)
  txHash         String?            @db.VarChar(66)
  nftTokenId     String?            @unique @db.VarChar(100)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  User           User?              @relation(fields: [userId], references: [id])
  userId         String?            @db.Uuid
}

model Comment {
  id             String       @id @default(uuid()) @db.Uuid
  content        String       @db.Text
  authorWallet   String       @db.VarChar(42)
  verification   Verification @relation(fields: [verificationId], references: [id])
  verificationId String       @db.Uuid
  createdAt      DateTime     @default(now())
}

model Skill {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @db.VarChar(50)
  projects  Project[]
  createdAt DateTime  @default(now())
}
